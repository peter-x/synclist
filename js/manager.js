// Generated by CoffeeScript 1.6.1
(function() {
  var Manager,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Manager = (function() {

    function Manager(_database) {
      var filename, _i, _len, _ref,
        _this = this;
      this._database = _database;
      this._allItems = {};
      this._currentItems = {};
      this._doNotMerge = true;
      this._onChangeObservers = [];
      this._database.onChange(function(filename) {
        return _this._onChangeInDatabase(filename);
      });
      _ref = this._database.listObjects();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        filename = _ref[_i];
        this._onChangeInDatabase(filename);
      }
      this._doNotMerge = false;
      this._doBulkMerge;
    }

    Manager.prototype.getCategories = function() {
      var id, item, k, ret, _ref, _results;
      ret = {};
      _ref = this._currentItems;
      for (id in _ref) {
        item = _ref[id];
        ret[item.getCategory()] = 1;
      }
      _results = [];
      for (k in ret) {
        _results.push(k);
      }
      return _results;
    };

    Manager.prototype.getItems = function() {
      return this._currentItems;
    };

    Manager.prototype.saveItem = function(item) {
      this._database.save(item.getID() + '-' + item.getRevision(), item.jsonEncode());
      return item;
    };

    Manager.prototype.onChange = function(fun) {
      this._onChangeObservers.push(fun);
      return null;
    };

    Manager.prototype.clearObservers = function() {
      return this._onChangeObservers = [];
    };

    Manager.prototype._onChangeInDatabase = function(filename) {
      var id, item;
      if (__indexOf.call(this._allItems, filename) >= 0) {
        console.log("Error: Got change notification for file we " + "already know about: " + filename);
        return;
      }
      item = Item.createFromJSON(filename, this._database.load(filename));
      id = item.getID();
      this._allItems[filename] = item;
      if (item.isNewerThan(this._currentItems[id])) {
        this._currentItems[id] = item;
        this._callOnChangeObservers(item);
      }
      if (!this._doNotMerge) {
        return this._checkForConflicts(id);
      }
    };

    Manager.prototype._doBulkMerge = function() {
      var id, _results;
      _results = [];
      for (id in this._currentItems) {
        _results.push(this._checkForConflicts(id));
      }
      return _results;
    };

    Manager.prototype._checkForConflicts = function(id) {
      var base, baseItem, diffs, item, revisionToMerge, secondItem;
      item = this._currentItems[id];
      diffs = Utilities.symmetricSortedArrayDifference(this._revisionsForID(id), item.getRevisionsIncludingSelf());
      if (diffs.length === 0) {
        return null;
      }
      revisionToMerge = diffs.pop();
      secondItem = this._allItems[id + '-' + revisionToMerge];
      base = item.getLatestCommonAncestor(secondItem);
      baseItem = this._allItems[id + '-' + base];
      return this.saveItem(item.mergeWith(secondItem, baseItem));
    };

    Manager.prototype._callOnChangeObservers = function(item) {
      var fun, _i, _len, _ref;
      _ref = this._onChangeObservers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fun = _ref[_i];
        fun(item);
      }
      return null;
    };

    Manager.prototype._revisionsForID = function(id) {
      var filename, revNo, revision, thisID, _ref, _results;
      _results = [];
      for (filename in this._allItems) {
        _ref = filename.split('-'), thisID = _ref[0], revNo = _ref[1], revision = _ref[2];
        if (thisID !== id) {
          continue;
        }
        _results.push(revNo + '-' + revision);
      }
      return _results;
    };

    return Manager;

  })();

  (typeof exports !== "undefined" && exports !== null ? exports : this).Manager = Manager;

}).call(this);
