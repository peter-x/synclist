// Generated by CoffeeScript 1.6.1
(function() {
  var Utilities;

  Utilities = {
    defaultComparator: function(a, b) {
      if (a > b) {
        return 1;
      } else if (b > a) {
        return -1;
      } else {
        return 0;
      }
    },
    arrayToSet: function(array) {
      var set, x, _i, _len;
      set = {};
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        x = array[_i];
        set[x] = 1;
      }
      return set;
    },
    setToArray: function(set) {
      var x, _results;
      _results = [];
      for (x in set) {
        _results.push(x);
      }
      return _results;
    },
    sortedArrayWithoutDuplicates: function(array, comparator) {
      if (comparator == null) {
        comparator = void 0;
      }
      array = Utilities.setToArray(Utilities.arrayToSet(array));
      array.sort(comparator);
      return array;
    },
    sortedArrayDifference: function(array1, array2, comparator) {
      var diff, set1, set2, x;
      if (comparator == null) {
        comparator = void 0;
      }
      set1 = Utilities.arrayToSet(array1);
      set2 = Utilities.arrayToSet(array2);
      diff = (function() {
        var _results;
        _results = [];
        for (x in set1) {
          if (set2[x] == null) {
            _results.push(x);
          }
        }
        return _results;
      })();
      diff.sort(comparator);
      return diff;
    },
    symmetricSortedArrayDifference: function(array1, array2, comparator) {
      var diff, set1, set2, x;
      if (comparator == null) {
        comparator = void 0;
      }
      set1 = Utilities.arrayToSet(array1);
      set2 = Utilities.arrayToSet(array2);
      diff = ((function() {
        var _results;
        _results = [];
        for (x in set1) {
          if (set2[x] == null) {
            _results.push(x);
          }
        }
        return _results;
      })()).concat((function() {
        var _results;
        _results = [];
        for (x in set2) {
          if (set1[x] == null) {
            _results.push(x);
          }
        }
        return _results;
      })());
      diff.sort(comparator);
      return diff;
    },
    deferredPromise: function(arg) {
      return jQuery.Deferred().resolve(arg).promise();
    },
    rejectedDeferredPromise: function(arg) {
      return jQuery.Deferred().reject(arg).promise();
    }
  };

  (typeof exports !== "undefined" && exports !== null ? exports : this).Utilities = Utilities;

}).call(this);
