// Generated by CoffeeScript 1.6.1
(function() {
  var LocalStorageDatabase;

  LocalStorageDatabase = (function() {

    function LocalStorageDatabase(context, password, localStorage) {
      var _this = this;
      this.context = context != null ? context : 'synclist';
      this.password = password != null ? password : 'simple constant password';
      this.localStorage = localStorage != null ? localStorage : window.localStorage;
      this.changeObservers = [];
      window.addEventListener('storage', function(ev) {
        if (_this.keyIsInContext(ev.key)) {
          return _this.callChangeObservers(_this.withoutContext(ev.key));
        }
      });
    }

    LocalStorageDatabase.prototype.save = function(filename, plainData) {
      var data;
      data = Crypto.encrypt(plainData, this.password);
      this.localStorage[this.context + '/' + filename] = data;
      this.callChangeObservers(filename);
      return null;
    };

    LocalStorageDatabase.prototype.load = function(filename) {
      var data;
      data = this.localStorage[this.context + '/' + filename];
      return Crypto.decrypt(data, this.password);
    };

    LocalStorageDatabase.prototype.listObjects = function() {
      var i, ls, _i, _ref, _results;
      ls = this.localStorage;
      _results = [];
      for (i = _i = 0, _ref = ls.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.keyIsInContext(ls.key(i))) {
          _results.push(this.withoutContext(ls.key(i)));
        }
      }
      return _results;
    };

    LocalStorageDatabase.prototype.onChange = function(fun) {
      return this.changeObservers.push(fun);
    };

    LocalStorageDatabase.prototype.clear = function() {
      var i, item, itemsToDelete, ls, _i, _len, _results;
      ls = this.localStorage;
      itemsToDelete = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = ls.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (this.keyIsInContext(ls.key(i))) {
            _results.push(ls.key(i));
          }
        }
        return _results;
      }).call(this);
      _results = [];
      for (_i = 0, _len = itemsToDelete.length; _i < _len; _i++) {
        item = itemsToDelete[_i];
        _results.push(ls.removeItem(item));
      }
      return _results;
    };

    LocalStorageDatabase.prototype.clearObservers = function() {
      return this.changeObservers = [];
    };

    LocalStorageDatabase.prototype.callChangeObservers = function(name) {
      var observer, _i, _len, _ref;
      _ref = this.changeObservers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        observer = _ref[_i];
        observer(name);
      }
      return null;
    };

    LocalStorageDatabase.prototype.keyIsInContext = function(name) {
      return (name != null) && name.slice(0, +this.context.length + 1 || 9e9) === this.context + '/';
    };

    LocalStorageDatabase.prototype.withoutContext = function(name) {
      return name.slice(this.context.length + 1);
    };

    return LocalStorageDatabase;

  })();

  (typeof exports !== "undefined" && exports !== null ? exports : this).LocalStorageDatabase = LocalStorageDatabase;

}).call(this);
