// Generated by CoffeeScript 1.6.1
(function() {
  var SyncService, Synchronizer;

  SyncService = (function() {

    function SyncService(_settings, _database) {
      var _this = this;
      this._settings = _settings;
      this._database = _database;
      this._synchronizers = [];
      this._settings.onChange(function(remoteSettings) {
        var db, dbSetting, s, _i, _j, _len, _len1, _ref, _results;
        if (typeof console !== "undefined" && console !== null) {
          console.log("Syncservice: Change in settings detected");
        }
        _ref = _this._synchronizers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          s = _ref[_i];
          s.destroy();
        }
        _this._synchronizers = [];
        _results = [];
        for (_j = 0, _len1 = remoteSettings.length; _j < _len1; _j++) {
          dbSetting = remoteSettings[_j];
          db = _this._settingToDb(dbSetting);
          if (db) {
            _results.push(_this._synchronizers.push(new Synchronizer(_this._database, db)));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
    }

    SyncService.prototype._settingToDb = function(setting) {
      var dbClass, encpassword, options;
      if (setting.type === 'LocalStorage') {
        dbClass = LocalStorageBackend;
        options = {
          context: setting.location
        };
        encpassword = setting.encpassword;
        return new Database(dbClass, options, encpassword);
      } else if (setting.type === 'WebDAV') {
        dbClass = WebDavBackend;
        options = {
          url: setting.location,
          username: setting.username,
          password: setting.password
        };
        encpassword = setting.encpassword;
        return new Database(dbClass, options, encpassword);
      } else {
        return null;
      }
    };

    return SyncService;

  })();

  Synchronizer = (function() {

    function Synchronizer(_sourceDB, _targetDB) {
      var _this = this;
      this._sourceDB = _sourceDB;
      this._targetDB = _targetDB;
      this._changesToIgnore = {};
      this._active = true;
      this._sourceDB.onChange(function(filename) {
        if (_this._changesToIgnore[filename] != null) {
          return delete _this._changesToIgnore[filename];
        } else {
          _this._changesToIgnore[filename] = 1;
          return _this._transferTo(filename);
        }
      });
      this._targetDB.onChange(function(filename) {
        if (_this._changesToIgnore[filename] != null) {
          return delete _this._changesToIgnore[filename];
        } else {
          _this._changesToIgnore[filename] = 1;
          return _this._transferFrom(filename);
        }
      });
      this._fullSync();
    }

    Synchronizer.prototype.destroy = function() {
      return this._active = false;
    };

    Synchronizer.prototype._fullSync = function() {
      var _this = this;
      if (!this._active) {
        return;
      }
      return this._sourceDB.listObjects().then(function(sourceList) {
        if (!_this._active) {
          return;
        }
        return _this._targetDB.listObjects().then(function(targetList) {
          var toTransferFrom, toTransferTo, x, _i, _j, _len, _len1, _results;
          if (!_this._active) {
            return;
          }
          toTransferTo = Utilities.sortedArrayDifference(sourceList, targetList);
          for (_i = 0, _len = toTransferTo.length; _i < _len; _i++) {
            x = toTransferTo[_i];
            _this._transferTo(x);
          }
          toTransferFrom = Utilities.sortedArrayDifference(targetList, sourceList);
          _results = [];
          for (_j = 0, _len1 = toTransferFrom.length; _j < _len1; _j++) {
            x = toTransferFrom[_j];
            _results.push(_this._transferFrom(x));
          }
          return _results;
        });
      });
    };

    Synchronizer.prototype._transferTo = function(filename) {
      return this._transfer(filename, this._sourceDB, this._targetDB);
    };

    Synchronizer.prototype._transferFrom = function(filename) {
      return this._transfer(filename, this._targetDB, this._sourceDB);
    };

    Synchronizer.prototype._transfer = function(filename, db1, db2) {
      var _this = this;
      if (!(this._active && filename.match(/^item_/))) {
        return;
      }
      if (typeof console !== "undefined" && console !== null) {
        console.log("Syncservice: Transferring " + filename + ".");
      }
      return db1.load(filename).then(function(data) {
        if (!(data && _this._active)) {
          return;
        }
        return db2.save(filename, data);
      });
    };

    return Synchronizer;

  })();

  (typeof exports !== "undefined" && exports !== null ? exports : this).SyncService = SyncService;

}).call(this);
