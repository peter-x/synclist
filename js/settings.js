// Generated by CoffeeScript 1.6.1
(function() {
  var Settings;

  Settings = (function() {

    function Settings(_database) {
      var _this = this;
      this._database = _database;
      this._storages = [];
      this._onChangeListeners = [];
      $('#addStorage').click(function() {
        return _this._populateSettingsForStorageDialog(-1);
      });
      $('#apply-1').click(function() {
        return _this._applyStorageSettings();
      });
      this._database.onChange(function(item) {
        if (item === "settings") {
          return _this._settingsChanged();
        }
      });
      this._settingsChanged();
    }

    Settings.prototype.onChange = function(callback) {
      this._onChangeListeners.push(callback);
      return callback(this._storages);
    };

    Settings.prototype._settingsChanged = function() {
      var _this = this;
      return this._database.loadPlain('settings').then(function(data) {
        try {
          _this._storages = JSON.parse(data);
        } catch (error) {
          _this._storages = [];
        }
        _this._callOnChangeListeners();
        return _this._updateUI();
      });
    };

    Settings.prototype._updateUI = function() {
      var index, list, storage, _i, _len, _ref, _results,
        _this = this;
      list = $('#storagelist');
      list.empty();
      _ref = this._storages;
      _results = [];
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        storage = _ref[index];
        _results.push((function(storage, index) {
          return $('<li></li>').append($('<a href="#" ' + 'data-rel="dialog" data-role="button"></a>').text(storage.location).button().click(function() {
            _this._populateSettingsForStorageDialog(index);
            return $.mobile.changePage('#settingsForStorage');
          })).appendTo(list);
        })(storage, index));
      }
      return _results;
    };

    Settings.prototype._populateSettingsForStorageDialog = function(index) {
      var data, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      data = (_ref = this._storages[index]) != null ? _ref : {};
      $('#storage-index-1').val(index);
      $('#type-1').val((_ref1 = data.type) != null ? _ref1 : '');
      $('#location-1').val((_ref2 = data.location) != null ? _ref2 : '');
      $('#username-1').val((_ref3 = data.username) != null ? _ref3 : '');
      $('#password-1').val((_ref4 = data.password) != null ? _ref4 : '');
      return $('#encpassword-1').val((_ref5 = data.encpassword) != null ? _ref5 : '');
    };

    Settings.prototype._applyStorageSettings = function() {
      var data, index,
        _this = this;
      index = +$('#storage-index-1').val();
      data = {
        type: $('#type-1').val(),
        location: $('#location-1').val(),
        username: $('#username-1').val(),
        password: $('#password-1').val(),
        encpassword: $('#encpassword-1').val()
      };
      return this._database.loadPlain('settings').always(function(settings) {
        try {
          settings = JSON.parse(settings);
        } catch (error) {
          settings = [];
        }
        if (index === '' || index < 0) {
          index = settings.length;
        }
        settings[index] = data;
        return _this._database.savePlain('settings', JSON.stringify(settings)).then(function() {
          return $('#settingsForStorage').dialog('close');
        });
      });
    };

    Settings.prototype._callOnChangeListeners = function() {
      var callback, _i, _len, _ref, _results;
      _ref = this._onChangeListeners;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        _results.push(callback(this._storages));
      }
      return _results;
    };

    return Settings;

  })();

  (typeof exports !== "undefined" && exports !== null ? exports : this).Settings = Settings;

}).call(this);
