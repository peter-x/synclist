// Generated by CoffeeScript 1.6.1
(function() {
  var UserInterface;

  UserInterface = (function() {

    function UserInterface(_manager) {
      var id, item, _ref,
        _this = this;
      this._manager = _manager;
      this._currentlyEditingItems = {};
      this._initializeUI();
      this._suppressRefreshCalls = true;
      _ref = this._manager.getItems();
      for (id in _ref) {
        item = _ref[id];
        this._onItemChanged(item);
      }
      this._suppressRefreshCalls = false;
      $('#items').listview('refresh');
      this._manager.onChange(function(item) {
        return _this._onItemChanged(item);
      });
    }

    UserInterface.prototype._initializeUI = function() {
      var _this = this;
      return $('#newItem').click(function() {
        var text;
        text = window.prompt("Text");
        if (text != null) {
          return _this._manager.saveItem(Item.createNew(text, _this._currentCategory()));
        }
      });
    };

    UserInterface.prototype._currentCategory = function() {
      return '';
    };

    UserInterface.prototype._showHideBasedOnCategory = function(items, category) {
      var showCondition;
      if (category == null) {
        category = this._currentCategory();
      }
      showCondition = function(e) {
        return category === '' || $(e).data('category') === category;
      };
      items.filter(function() {
        return !showCondition(this);
      }).hide();
      return items.filter(function() {
        return showCondition(this);
      }).show();
    };

    UserInterface.prototype._onItemChanged = function(item) {
      var element, id,
        _this = this;
      id = item.getID();
      if (this._currentlyEditingItems[id] != null) {
        return;
      }
      element = $('#item_' + id);
      if (element.length === 0) {
        element = this._createElement(id);
      }
      $('.resolved', element).button({
        theme: item.isResolved() ? 'b' : 'c'
      });
      $('.done', element).change(function() {
        return _this._itemResolutionChanged(id, $('.done', element).val());
      });
      $('.text', element).text(item.getText());
      element.data('category', item.getCategory());
      this._showHideBasedOnCategory(element);
      if (!this._suppressRefreshCalls) {
        return $('#items').listview('refresh');
      }
    };

    UserInterface.prototype._createElement = function(id) {
      var el,
        _this = this;
      el = $('<li class="item" data-icon="false">' + '<div>' + '<span class="text ui-btn-inline ui-mini" style="height: 24px;"></span>' + '<span style="float: right;">' + '<button class="acceptEdit" data-inline="true" data-mini="true" ' + 'data-icon="check" data-iconpos="notext" />' + '<button class="abortEdit" data-inline="true" data-mini="true" ' + 'data-icon="delete" data-iconpos="notext" />' + '<button class="edit" data-inline="true" data-mini="true" ' + 'data-icon="edit" data-iconpos="notext" />' + '<button class="resolved" data-inline="true" data-mini="true" ' + 'data-icon="check" data-iconpos="notext" />' + '</span>' + '</div>' + '</li>').attr('id', 'item_' + id);
      $('button', el).button();
      $('.resolved', el).click(function() {
        return _this._toggleItemResolution(id);
      });
      $('.edit', el).click(function() {
        return _this._editItemClicked(id);
      });
      $('.abortEdit', el).click(function() {
        return _this._abortEditItemClicked(id);
      }).closest('.ui-btn').hide();
      $('.acceptEdit', el).click(function() {
        return _this._acceptEditItemClicked(id);
      }).closest('.ui-btn').hide();
      return el.appendTo('#items');
    };

    UserInterface.prototype._editItemClicked = function(id) {
      var item, range, sel, text;
      if (this._currentlyEditingItems[id] != null) {
        return;
      }
      item = this._manager.getItems()[id];
      if (item != null) {
        this._currentlyEditingItems[id] = item;
        this._showEditingButtonState(id);
        text = $('.text', '#item_' + id);
        text.attr('contenteditable', 'true');
        range = document.createRange();
        range.selectNode(text[0].childNodes[0]);
        range.collapse(false);
        sel = window.getSelection();
        sel.removeAllRanges();
        sel.addRange(range);
        return text.focus();
      }
    };

    UserInterface.prototype._abortEditItemClicked = function(id) {
      var item;
      item = this._currentlyEditingItems[id];
      delete this._currentlyEditingItems[id];
      if (item != null) {
        this._showNonEditingState(id);
        return $('.text', '#item_' + id).text(item.getText());
      }
    };

    UserInterface.prototype._acceptEditItemClicked = function(id) {
      var item, text;
      item = this._currentlyEditingItems[id];
      delete this._currentlyEditingItems[id];
      if (item != null) {
        this._showNonEditingState(id);
        text = $('.text', '#item_' + id).text();
        return this._manager.saveItem(item.setText(text));
      }
    };

    UserInterface.prototype._showEditingButtonState = function(id) {
      $('.abortEdit, .acceptEdit', '#item_' + id).closest('.ui-btn').show();
      return $('.edit', '#item_' + id).closest('.ui-btn').hide();
    };

    UserInterface.prototype._showNonEditingState = function(id) {
      $('.text', '#item_' + id).attr('contenteditable', 'false').blur();
      $('.abortEdit, .acceptEdit', '#item_' + id).closest('.ui-btn').hide();
      return $('.edit', '#item_' + id).closest('.ui-btn').show();
    };

    UserInterface.prototype._toggleItemResolution = function(id) {
      var item;
      item = this._manager.getItems()[id];
      if (item != null) {
        return this._manager.saveItem(item.setResolved(!item.isResolved()));
      }
    };

    return UserInterface;

  })();

  (typeof exports !== "undefined" && exports !== null ? exports : this).UserInterface = UserInterface;

}).call(this);
