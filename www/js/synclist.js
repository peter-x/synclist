// Generated by CoffeeScript 1.6.1
(function() {
  var Crypto;

  Crypto = {
    hash: function(data) {
      return CryptoJS.SHA1(data).toString();
    },
    encrypt: function(data, password) {
      if (password == null) {
        return data;
      } else {
        return CryptoJS.AES.encrypt(data, password).toString();
      }
    },
    decrypt: function(data, password) {
      if (password == null) {
        return data;
      } else {
        return CryptoJS.AES.decrypt(data, password).toString(CryptoJS.enc.Utf8);
      }
    },
    utf8ToBase64: function(string) {
      return CryptoJS.enc.Utf8.parse(string).toString(CryptoJS.enc.Base64);
    }
  };

  (typeof exports !== "undefined" && exports !== null ? exports : this).Crypto = Crypto;

}).call(this);
// Generated by CoffeeScript 1.6.1
(function() {
  var Utilities;

  Utilities = {
    defaultComparator: function(a, b) {
      if (a > b) {
        return 1;
      } else if (b > a) {
        return -1;
      } else {
        return 0;
      }
    },
    arrayToSet: function(array) {
      var set, x, _i, _len;
      set = {};
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        x = array[_i];
        set[x] = 1;
      }
      return set;
    },
    setToArray: function(set) {
      var x, _results;
      _results = [];
      for (x in set) {
        _results.push(x);
      }
      return _results;
    },
    sortedArrayWithoutDuplicates: function(array, comparator) {
      if (comparator == null) {
        comparator = void 0;
      }
      array = Utilities.setToArray(Utilities.arrayToSet(array));
      array.sort(comparator);
      return array;
    },
    sortedArrayDifference: function(array1, array2, comparator) {
      var diff, set1, set2, x;
      if (comparator == null) {
        comparator = void 0;
      }
      set1 = Utilities.arrayToSet(array1);
      set2 = Utilities.arrayToSet(array2);
      diff = (function() {
        var _results;
        _results = [];
        for (x in set1) {
          if (set2[x] == null) {
            _results.push(x);
          }
        }
        return _results;
      })();
      diff.sort(comparator);
      return diff;
    },
    symmetricSortedArrayDifference: function(array1, array2, comparator) {
      var diff, set1, set2, x;
      if (comparator == null) {
        comparator = void 0;
      }
      set1 = Utilities.arrayToSet(array1);
      set2 = Utilities.arrayToSet(array2);
      diff = ((function() {
        var _results;
        _results = [];
        for (x in set1) {
          if (set2[x] == null) {
            _results.push(x);
          }
        }
        return _results;
      })()).concat((function() {
        var _results;
        _results = [];
        for (x in set2) {
          if (set1[x] == null) {
            _results.push(x);
          }
        }
        return _results;
      })());
      diff.sort(comparator);
      return diff;
    },
    deferredPromise: function(arg) {
      return jQuery.Deferred().resolve(arg).promise();
    },
    rejectedDeferredPromise: function(arg) {
      return jQuery.Deferred().reject(arg).promise();
    }
  };

  (typeof exports !== "undefined" && exports !== null ? exports : this).Utilities = Utilities;

}).call(this);
// Generated by CoffeeScript 1.6.1
(function() {
  var Observer,
    __slice = [].slice;

  Observer = function(theClass) {
    var override;
    override = function(method, newImpl) {
      var oldImpl;
      oldImpl = theClass.prototype[method];
      if (oldImpl != null) {
        return theClass.prototype[method] = function() {
          var args, ret;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          ret = newImpl.apply(this, args);
          oldImpl.apply(this, args);
          return ret;
        };
      } else {
        return theClass.prototype[method] = newImpl;
      }
    };
    override('observe', function(callback) {
      var _ref;
      if ((_ref = this.observers) == null) {
        this.observers = [];
      }
      this.observers.push(callback);
      return callback;
    });
    override('unobserve', function(callback) {
      var x, _ref;
      if ((_ref = this.observers) == null) {
        this.observers = [];
      }
      this.observers = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.observers;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          x = _ref1[_i];
          if (x !== callback) {
            _results.push(x);
          }
        }
        return _results;
      }).call(this);
      return null;
    });
    override('clearObservers', function() {
      return this.observers = [];
    });
    return override('_callObservers', function() {
      var args, x, _i, _len, _ref, _ref1;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if ((_ref = this.observers) == null) {
        this.observers = [];
      }
      _ref1 = this.observers;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        x = _ref1[_i];
        x.apply(null, args);
      }
      return null;
    });
  };

  (typeof exports !== "undefined" && exports !== null ? exports : this).Observer = Observer;

}).call(this);
// Generated by CoffeeScript 1.6.1
(function() {
  var Item,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Item = (function() {

    function Item(id, revision, revisions, creation, resolution, modification, category, text, position) {
      this.id = id;
      this.revision = revision != null ? revision : '';
      this.revisions = revisions != null ? revisions : [];
      this.creation = creation != null ? creation : 0;
      this.resolution = resolution != null ? resolution : 0;
      this.modification = modification != null ? modification : 0;
      this.category = category != null ? category : '';
      this.text = text != null ? text : '';
      this.position = position != null ? position : 0;
    }

    Item.createFromJSON = function(filename, text) {
      var data, id, m, rev, revision, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4;
      try {
        data = JSON.parse(text);
      } catch (error) {
        return null;
      }
      if (typeof filename !== 'string' || typeof data !== 'object') {
        return null;
      }
      if (!((((typeof data.creation === (_ref2 = typeof data.resolution) && _ref2 === (_ref1 = typeof data.modification)) && _ref1 === (_ref = typeof data.position)) && _ref === 'number') && (typeof data.category === (_ref3 = typeof data.text) && _ref3 === 'string'))) {
        return null;
      }
      try {
        _ref4 = data.revisions.slice(0);
        for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
          rev = _ref4[_i];
          if (typeof rev !== 'string') {
            return null;
          }
        }
      } catch (error) {
        return null;
      }
      m = /^([a-zA-Z0-9]+)-([1-9][0-9]*-[a-zA-Z0-9]+)$/.exec(filename);
      if (!m) {
        return null;
      }
      filename = m[0], id = m[1], revision = m[2];
      return new Item(id, revision, data.revisions.slice(0), data.creation, data.resolution, data.modification, data.category, data.text, data.position);
    };

    Item.createNew = function(text, category, position) {
      var item, timestamp, _ref;
      if (category == null) {
        category = '';
      }
      if (position == null) {
        position = 0;
      }
      if (!((typeof text === (_ref = typeof category) && _ref === 'string') && typeof position === 'number')) {
        return null;
      } else {
        timestamp = (+(new Date)) / 1000.0;
        item = new Item(Item.generateID(), '', [], timestamp, 0, timestamp, category, text, position);
        return item.updateRevision();
      }
    };

    Item.prototype.getID = function() {
      return this.id;
    };

    Item.prototype.getRevision = function() {
      return this.revision;
    };

    Item.prototype.getRevisionsIncludingSelf = function() {
      return [this.revision].concat(this.revisions);
    };

    Item.prototype.getCreated = function() {
      return this.creation;
    };

    Item.prototype.isResolved = function() {
      return this.resolution > 0;
    };

    Item.prototype.getResolved = function() {
      return this.resolution;
    };

    Item.prototype.setResolved = function(resolved) {
      if (resolved == null) {
        resolved = true;
      }
      return this.changedCopy(function() {
        return this.resolution = resolved ? (+(new Date)) / 1000.0 : 0;
      });
    };

    Item.prototype.getCategory = function() {
      return this.category;
    };

    Item.prototype.setCategory = function(category) {
      return this.changedCopy(function() {
        return this.category = category;
      });
    };

    Item.prototype.getText = function() {
      return this.text;
    };

    Item.prototype.setText = function(text) {
      return this.changedCopy(function() {
        return this.text = text;
      });
    };

    Item.prototype.getPosition = function() {
      return this.position;
    };

    Item.prototype.setPosition = function(position) {
      return this.changedCopy(function() {
        return this.position = position;
      });
    };

    Item.prototype.jsonEncode = function() {
      this.revisions = Item.sortRevisions.apply(Item, this.revisions);
      return JSON.stringify({
        revisions: this.revisions,
        creation: this.creation,
        resolution: this.resolution,
        modification: this.modification,
        category: this.category,
        text: this.text,
        position: this.position
      });
    };

    Item.comparator = function(a, b) {
      if (a.position !== b.position) {
        return a.position - b.position;
      } else if (a.id > b.id) {
        return 1;
      } else if (a.id < b.id) {
        return -1;
      } else {
        return 0;
      }
    };

    Item.prototype.isNewerThan = function(otherItem) {
      return (otherItem == null) || Item.revisionComparator(this.revision, otherItem.revision) > 0;
    };

    Item.prototype.mergeWith = function(item, base) {
      var category, creation, modification, position, resolution, revision, revisions, text;
      revision = Item.sortRevisions(this.revision, item.revision)[1];
      revisions = Item.sortRevisions.apply(Item, [this.revision, item.revision].concat(__slice.call(this.revisions), __slice.call(item.revisions)));
      creation = base.creation;
      resolution = (item.resolution > 0) === (this.resolution > 0) ? Math.min(item.resolution, this.resolution) : (item.resolution > 0) !== (base.resolution > 0) ? item.resolution : this.resolution;
      modification = Math.max(this.modification, item.modification);
      text = this.text === item.text ? this.text : this.text === base.text ? item.text : item.text === base.text ? this.text : this.text < item.text ? this.text + ', ' + item.text : item.text + ', ' + this.text;
      category = this.category === item.category ? this.category : this.category === base.category ? item.category : item.category === base.category ? this.category : this.category < item.category ? this.category + ', ' + item.category : item.category + ', ' + this.category;
      position = this.position === base.position ? item.position : item.position === base.position ? this.position : Math.min(this.position, item.position);
      return new Item(this.id, revision, revisions, creation, resolution, modification, category, text, position).updateRevision();
    };

    Item.prototype.getLatestCommonAncestor = function(item) {
      var i, len, _ref, _ref1;
      if (this.revision === item.revision || (_ref = this.revision, __indexOf.call(item.revisions, _ref) >= 0)) {
        return this.revision;
      } else if (_ref1 = item.revision, __indexOf.call(this.revisions, _ref1) >= 0) {
        return item.revision;
      } else {
        len = Math.min(this.revisions.length, item.revisions.length);
        i = 0;
        while (i < len && this.revisions[i] === item.revisions[i]) {
          i += 1;
        }
        if (i === 0) {
          return null;
        } else {
          return this.revisions[i - 1];
        }
      }
    };

    Item.prototype.changedCopy = function(mod) {
      var item;
      item = new Item(this.id, this.revision, this.revisions.slice(0), this.creation, this.resolution, this.modification, this.category, this.text, this.position);
      mod.call(item);
      return item.adjustModificationAndUpdateRevision();
    };

    Item.prototype.adjustModificationAndUpdateRevision = function() {
      this.modification = (+(new Date)) / 1000.0;
      return this.updateRevision();
    };

    Item.prototype.updateRevision = function() {
      var data;
      if (this.revision.length > 0) {
        this.revisions.push(this.revision);
      }
      data = this.jsonEncode();
      this.revision = this.getIncrementedRevision(data);
      return this;
    };

    Item.prototype.getIncrementedRevision = function(data) {
      var rev, revisionNumber;
      rev = this.revision || '0-';
      revisionNumber = +(rev.split('-'))[0];
      return "" + (revisionNumber + 1) + "-" + (Crypto.hash(data));
    };

    Item.generateID = function(length) {
      var characters, i;
      if (length == null) {
        length = 22;
      }
      characters = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
      return ((function() {
        var _i, _results;
        _results = [];
        for (i = _i = 1; 1 <= length ? _i <= length : _i >= length; i = 1 <= length ? ++_i : --_i) {
          _results.push(characters[Math.floor(Math.random() * characters.length)]);
        }
        return _results;
      })()).join('');
    };

    Item.sortRevisions = function() {
      var r, revisions, revs, _i, _len;
      revisions = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      revs = {};
      for (_i = 0, _len = revisions.length; _i < _len; _i++) {
        r = revisions[_i];
        revs[r] = 1;
      }
      revs = (function() {
        var _results;
        _results = [];
        for (r in revs) {
          _results.push(r);
        }
        return _results;
      })();
      revs.sort(Item.revisionComparator);
      return revs;
    };

    Item.revisionComparator = function(a, b) {
      var aNum, aRev, bNum, bRev, _ref, _ref1;
      _ref = a.split('-'), aNum = _ref[0], aRev = _ref[1];
      _ref1 = b.split('-'), bNum = _ref1[0], bRev = _ref1[1];
      if (+aNum !== +bNum) {
        return aNum - bNum;
      } else if (aRev > bRev) {
        return 1;
      } else if (bRev > aRev) {
        return -1;
      } else {
        return 0;
      }
    };

    return Item;

  })();

  (typeof exports !== "undefined" && exports !== null ? exports : this).Item = Item;

}).call(this);
// Generated by CoffeeScript 1.6.1
(function() {
  var Database, LocalStorageBackend, WebDavBackend;

  LocalStorageBackend = (function() {

    function LocalStorageBackend(_changeNotification, config) {
      var _this = this;
      this._changeNotification = _changeNotification;
      if (config == null) {
        config = {
          context: 'synclist'
        };
      }
      this._context = config.context;
      this._localStorage = window.localStorage;
      window.addEventListener('storage', function(ev) {
        if (_this._keyIsInContext(ev.key)) {
          return _this._changeNotification(_this._withoutContext(ev.key));
        }
      });
    }

    LocalStorageBackend.prototype.list = function() {
      var i, ls;
      ls = this._localStorage;
      return Utilities.deferredPromise((function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = ls.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (this._keyIsInContext(ls.key(i))) {
            _results.push(this._withoutContext(ls.key(i)));
          }
        }
        return _results;
      }).call(this));
    };

    LocalStorageBackend.prototype.get = function(key) {
      return Utilities.deferredPromise(this._localStorage[this._context + '/' + key]);
    };

    LocalStorageBackend.prototype.put = function(key, data) {
      return Utilities.deferredPromise(this._localStorage[this._context + '/' + key] = data, this._changeNotification(key));
    };

    LocalStorageBackend.clearContext = function(context) {
      var i, item, itemsToDelete, ls, _i, _len, _results;
      ls = window.localStorage;
      itemsToDelete = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = ls.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (ls.key(i).slice(0, +context.length + 1 || 9e9) === context + '/') {
            _results.push(ls.key(i));
          }
        }
        return _results;
      })();
      _results = [];
      for (_i = 0, _len = itemsToDelete.length; _i < _len; _i++) {
        item = itemsToDelete[_i];
        _results.push(ls.removeItem(item));
      }
      return _results;
    };

    LocalStorageBackend.prototype._keyIsInContext = function(name) {
      return (name != null) && name.slice(0, +this._context.length + 1 || 9e9) === this._context + '/';
    };

    LocalStorageBackend.prototype._withoutContext = function(name) {
      return name.slice(this._context.length + 1);
    };

    return LocalStorageBackend;

  })();

  WebDavBackend = (function() {

    function WebDavBackend(_changeNotification, config) {
      var authString;
      this._changeNotification = _changeNotification;
      this._url = config.url;
      if (this._url[this._url.length - 1] !== '/') {
        this._url += '/';
      }
      this._username = config.username;
      this._password = config.password;
      authString = 'Basic ' + Crypto.utf8ToBase64(this._username + ':' + this._password);
      this._authHeader = {
        Authorization: authString
      };
    }

    WebDavBackend.prototype.list = function() {
      var ajaxOptions, requestHost, requestPath, _ref;
      _ref = this._url.match(/^(https?:\/\/[^\/]*)(\/.*)/).slice(1), requestHost = _ref[0], requestPath = _ref[1];
      ajaxOptions = {
        url: this._url,
        type: 'PROPFIND',
        contentType: 'application/xml',
        headers: {
          Depth: '1',
          Authorization: this._authHeader['Authorization']
        },
        data: '<?xml version="1.0" encoding="utf-8" ?>' + '<propfind xmlns="DAV:"><prop></prop></propfind>'
      };
      return jQuery.ajax(ajaxOptions).pipe(function(data) {
        var entries;
        entries = [];
        jQuery('response', data).each(function(i, el) {
          var elPath;
          elPath = jQuery('href', el).text().replace(/^https?:\/\/[^\/]*/, '');
          if (elPath.slice(0, +(requestPath.length - 1) + 1 || 9e9) === requestPath) {
            el = elPath.slice(requestPath.length);
            if (el !== '' && el !== '/') {
              return entries.push(el);
            }
          }
        });
        return entries;
      });
    };

    WebDavBackend.prototype.get = function(key) {
      return jQuery.ajax({
        url: this._url + '/' + key,
        dataType: 'text',
        headers: this._authHeader
      });
    };

    WebDavBackend.prototype.put = function(key, data) {
      var ajaxOpts,
        _this = this;
      ajaxOpts = {
        url: this._url + '/' + key,
        data: data,
        contentType: '',
        type: 'PUT',
        dataType: 'text',
        headers: this._authHeader
      };
      return jQuery.ajax(ajaxOpts).then(function() {
        return _this._changeNotification(key);
      });
    };

    return WebDavBackend;

  })();

  Database = (function() {

    function Database(Backend, backendConfig, _password) {
      var _this = this;
      this._password = _password != null ? _password : null;
      this._backend = new Backend((function(key) {
        return _this._callObservers(key);
      }), backendConfig);
    }

    Database.prototype.save = function(filename, plainData) {
      var _this = this;
      return this._backend.put(filename, Crypto.encrypt(plainData, this._password)).then(function() {
        return filename;
      });
    };

    Database.prototype.load = function(filename) {
      var _this = this;
      return this._backend.get(filename).then(function(data) {
        if (data != null) {
          return Crypto.decrypt(data, _this._password);
        } else {
          return Utilities.rejectedDeferredPromise();
        }
      });
    };

    Database.prototype.listObjects = function() {
      return this._backend.list();
    };

    return Database;

  })();

  Observer(Database);

  (typeof exports !== "undefined" && exports !== null ? exports : this).Database = Database;

  (typeof exports !== "undefined" && exports !== null ? exports : this).LocalStorageBackend = LocalStorageBackend;

  (typeof exports !== "undefined" && exports !== null ? exports : this).WebDavBackend = WebDavBackend;

}).call(this);
// Generated by CoffeeScript 1.6.1
(function() {
  var Settings;

  Settings = (function() {

    function Settings(_database) {
      var _this = this;
      this._database = _database;
      this._storages = [];
      $('#addStorage').click(function() {
        return _this._populateSettingsForStorageDialog(-1);
      });
      $('#apply-1').click(function() {
        return _this._applyStorageSettings();
      });
      this._database.observe(function(item) {
        if (item === "settings") {
          return _this._settingsChanged();
        }
      });
      this._settingsChanged();
    }

    Settings.prototype.observe = function(callback) {
      return callback(this._storages);
    };

    Settings.prototype._settingsChanged = function() {
      var _this = this;
      return this._database.load('settings').then(function(data) {
        try {
          _this._storages = JSON.parse(data);
        } catch (error) {
          _this._storages = [];
        }
        _this._callObservers(_this._storages);
        return _this._updateUI();
      });
    };

    Settings.prototype._updateUI = function() {
      var index, list, storage, _i, _len, _ref, _results,
        _this = this;
      list = $('#storagelist');
      list.empty();
      _ref = this._storages;
      _results = [];
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        storage = _ref[index];
        _results.push((function(storage, index) {
          return $('<li></li>').append($('<a href="#" ' + 'data-rel="dialog" data-role="button"></a>').text(storage.location).button().click(function() {
            _this._populateSettingsForStorageDialog(index);
            return $.mobile.changePage('#settingsForStorage');
          })).appendTo(list);
        })(storage, index));
      }
      return _results;
    };

    Settings.prototype._populateSettingsForStorageDialog = function(index) {
      var data, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      data = (_ref = this._storages[index]) != null ? _ref : {};
      $('#storage-index-1').val(index);
      $('#type-1').val((_ref1 = data.type) != null ? _ref1 : '');
      $('#location-1').val((_ref2 = data.location) != null ? _ref2 : '');
      $('#username-1').val((_ref3 = data.username) != null ? _ref3 : '');
      $('#password-1').val((_ref4 = data.password) != null ? _ref4 : '');
      return $('#encpassword-1').val((_ref5 = data.encpassword) != null ? _ref5 : '');
    };

    Settings.prototype._applyStorageSettings = function() {
      var data, index,
        _this = this;
      index = +$('#storage-index-1').val();
      data = {
        type: $('#type-1').val(),
        location: $('#location-1').val(),
        username: $('#username-1').val(),
        password: $('#password-1').val(),
        encpassword: $('#encpassword-1').val()
      };
      return this._database.load('settings').always(function(settings) {
        try {
          settings = JSON.parse(settings);
        } catch (error) {
          settings = [];
        }
        if (index === '' || index < 0) {
          index = settings.length;
        }
        settings[index] = data;
        return _this._database.save('settings', JSON.stringify(settings)).then(function() {
          return $('#settingsForStorage').dialog('close');
        });
      });
    };

    return Settings;

  })();

  Observer(Settings);

  (typeof exports !== "undefined" && exports !== null ? exports : this).Settings = Settings;

}).call(this);
// Generated by CoffeeScript 1.6.1
(function() {
  var SyncService, Synchronizer;

  SyncService = (function() {

    function SyncService(_settings, _database) {
      var _this = this;
      this._settings = _settings;
      this._database = _database;
      this._combinedState = 0;
      this._errorMessage = void 0;
      this._synchronizers = [];
      this._synchronizerObserver = function() {
        var s, state, _i, _len, _ref;
        _this._combinedState = 0;
        _this._errorMessage = void 0;
        _ref = _this._synchronizers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          s = _ref[_i];
          state = (function() {
            switch (s.getState()) {
              case 'error':
                return 2;
              case 'synchronizing':
                return 1;
              default:
                return 0;
            }
          })();
          _this._combinedState = Math.max(_this._combinedState, state);
          if (state === 2) {
            _this._errorMessage = s.getErrorMessage();
          }
        }
        _this._combinedState = ['waiting', 'synchronizing', 'error'][_this._combinedState];
        return _this._callObservers(_this._combinedState, _this._errorMessage);
      };
      this._settings.observe(function(remoteSettings) {
        var db, dbSetting, s, sync, _i, _j, _len, _len1, _ref;
        if (typeof console !== "undefined" && console !== null) {
          console.log("Syncservice: Change in settings detected");
        }
        _ref = _this._synchronizers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          s = _ref[_i];
          s.destructor();
        }
        _this._synchronizers = [];
        for (_j = 0, _len1 = remoteSettings.length; _j < _len1; _j++) {
          dbSetting = remoteSettings[_j];
          db = _this._settingToDb(dbSetting);
          if (db) {
            sync = new Synchronizer(_this._database, db);
            sync.observe(_this._synchronizerObserver);
            _this._synchronizers.push(sync);
          }
        }
        return _this._synchronizerObserver();
      });
    }

    SyncService.prototype.getState = function() {
      return this._combinedState;
    };

    SyncService.prototype.getErrorMessage = function() {
      return this._erroMessage;
    };

    SyncService.prototype.fullSync = function() {
      var s, _i, _len, _ref, _results;
      _ref = this._synchronizers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        _results.push(s.fullSync());
      }
      return _results;
    };

    SyncService.prototype._settingToDb = function(setting) {
      var dbClass, encpassword, options;
      if (setting.type === 'LocalStorage') {
        dbClass = LocalStorageBackend;
        options = {
          context: setting.location
        };
        encpassword = setting.encpassword;
        return new Database(dbClass, options, encpassword);
      } else if (setting.type === 'WebDAV') {
        dbClass = WebDavBackend;
        options = {
          url: setting.location,
          username: setting.username,
          password: setting.password
        };
        encpassword = setting.encpassword;
        return new Database(dbClass, options, encpassword);
      } else {
        return null;
      }
    };

    SyncService.prototype.observe = function(callback) {
      return callback(this._combinedState, this._errorMessage);
    };

    return SyncService;

  })();

  Observer(SyncService);

  Synchronizer = (function() {

    function Synchronizer(_sourceDB, _targetDB) {
      var _this = this;
      this._sourceDB = _sourceDB;
      this._targetDB = _targetDB;
      this._state = 'waiting';
      this._transfers = 0;
      this._errorMessage = '';
      this._changesToIgnore = {};
      this._active = true;
      this._sourceDB.observe(this._sourceObserver = function(filename) {
        if (_this._changesToIgnore[filename] != null) {
          return delete _this._changesToIgnore[filename];
        } else {
          _this._changesToIgnore[filename] = 1;
          return _this._transferTo(filename);
        }
      });
      this._targetDB.observe(this._targetObserver = function(filename) {
        if (_this._changesToIgnore[filename] != null) {
          return delete _this._changesToIgnore[filename];
        } else {
          _this._changesToIgnore[filename] = 1;
          return _this._transferFrom(filename);
        }
      });
      this.fullSync();
    }

    Synchronizer.prototype.destructor = function() {
      this.clearObservers();
      this._state = 'destroyed';
      this._active = false;
      this._sourceDB.unobserve(this._sourceObserver);
      return this._targetDB.unobserve(this._targetObserver);
    };

    Synchronizer.prototype.fullSync = function() {
      var _this = this;
      if (!this._active) {
        return;
      }
      this._checkState(1);
      return this._sourceDB.listObjects().then(function(sourceList) {
        if (!_this._active) {
          return;
        }
        return _this._targetDB.listObjects().then(function(targetList) {
          var toTransferFrom, toTransferTo, x, _i, _j, _len, _len1, _results;
          if (!_this._active) {
            return;
          }
          toTransferTo = Utilities.sortedArrayDifference(sourceList, targetList);
          for (_i = 0, _len = toTransferTo.length; _i < _len; _i++) {
            x = toTransferTo[_i];
            _this._transferTo(x);
          }
          toTransferFrom = Utilities.sortedArrayDifference(targetList, sourceList);
          _results = [];
          for (_j = 0, _len1 = toTransferFrom.length; _j < _len1; _j++) {
            x = toTransferFrom[_j];
            _results.push(_this._transferFrom(x));
          }
          return _results;
        });
      }).done(function() {
        return _this._checkState(-1);
      }).fail(function(error) {
        return _this._setError(error);
      });
    };

    Synchronizer.prototype._transferTo = function(filename) {
      return this._transfer(filename, this._sourceDB, this._targetDB);
    };

    Synchronizer.prototype._transferFrom = function(filename) {
      return this._transfer(filename, this._targetDB, this._sourceDB);
    };

    Synchronizer.prototype._transfer = function(filename, db1, db2) {
      var _this = this;
      if (!(this._active && filename.match(/^item_/))) {
        return;
      }
      if (typeof console !== "undefined" && console !== null) {
        console.log("Syncservice: Transferring " + filename + ".");
      }
      this._checkState(1);
      return db1.load(filename).then(function(data) {
        if (!(data && _this._active)) {
          return;
        }
        return db2.save(filename, data);
      }).done(function() {
        return _this._checkState(-1);
      }).fail(function(error) {
        return _this._setError(error);
      });
    };

    Synchronizer.prototype.getState = function() {
      return this._state;
    };

    Synchronizer.prototype.getErrorMessage = function() {
      return this._errorMessage;
    };

    Synchronizer.prototype._checkState = function(transfers) {
      if (transfers === 0 || !this._active) {
        return;
      }
      this._transfers += transfers;
      this._state = this._transfers === 0 ? 'waiting' : 'synchronizing';
      return this._callObservers(this._state);
    };

    Synchronizer.prototype._setError = function(error) {
      this._active = false;
      this._state = 'error';
      this._errorMessage = error;
      return this._callObservers(this._state, this._errorMessage);
    };

    return Synchronizer;

  })();

  Observer(Synchronizer);

  (typeof exports !== "undefined" && exports !== null ? exports : this).SyncService = SyncService;

}).call(this);
// Generated by CoffeeScript 1.6.1
(function() {
  var Manager;

  Manager = (function() {

    function Manager(_database, _syncService) {
      var _this = this;
      this._database = _database;
      this._syncService = _syncService;
      this._allItems = {};
      this._currentItems = {};
      this._synchronizing = true;
      this._initializing = true;
      this._itemsToCheckForConflicts = {};
      this._database.observe(function(filename) {
        if (filename.match(/^item_/)) {
          return _this._onChangeInDatabase(filename.slice(5));
        }
      });
      this._database.listObjects().then(function(objects) {
        var filename, _i, _len;
        for (_i = 0, _len = objects.length; _i < _len; _i++) {
          filename = objects[_i];
          if (filename.match(/^item_/)) {
            _this._onChangeInDatabase(filename.slice(5));
          }
        }
        _this._initializing = false;
        return _this._checkAllForConflicts();
      });
      this._syncService.observe(function(state, errorMessage) {
        _this._synchronizing = state === 'synchronizing';
        return _this._checkAllForConflicts();
      });
    }

    Manager.prototype.getCategories = function() {
      var id, item, k, ret, _ref, _results;
      ret = {};
      _ref = this._currentItems;
      for (id in _ref) {
        item = _ref[id];
        ret[item.getCategory()] = 1;
      }
      _results = [];
      for (k in ret) {
        _results.push(k);
      }
      return _results;
    };

    Manager.prototype.getItems = function() {
      return this._currentItems;
    };

    Manager.prototype.saveItem = function(item) {
      return this._database.save('item_' + item.getID() + '-' + item.getRevision(), item.jsonEncode()).then(function() {
        return item;
      });
    };

    Manager.prototype._onChangeInDatabase = function(itemname) {
      var _this = this;
      if (this._allItems[itemname] != null) {
        console.log("Error: Got change notification for file we " + "already know about: " + itemname);
        return;
      }
      return this._database.load('item_' + itemname).then(function(data) {
        var id, item;
        item = Item.createFromJSON(itemname, data);
        if (!item) {
          return;
        }
        id = item.getID();
        _this._allItems[itemname] = item;
        if (item.isNewerThan(_this._currentItems[id])) {
          _this._currentItems[id] = item;
          _this._callObservers(item);
        }
        return _this._checkForConflicts(id);
      });
    };

    Manager.prototype._checkAllForConflicts = function() {
      var id, _results;
      if (this._initializing || this._synchronizing) {
        return;
      }
      _results = [];
      for (id in this._itemsToCheckForConflicts) {
        delete this._itemsToCheckForConflicts[id];
        _results.push(this._checkForConflicts(id));
      }
      return _results;
    };

    Manager.prototype._checkForConflicts = function(id) {
      var base, baseItem, diffs, item, merged, revisionToMerge, secondItem;
      if (this._initializing || this._synchronizing) {
        this._itemsToCheckForConflicts[id] = true;
        return;
      }
      item = this._currentItems[id];
      diffs = Utilities.sortedArrayDifference(this._revisionsForID(id), item.getRevisionsIncludingSelf());
      if (diffs.length === 0) {
        return null;
      }
      revisionToMerge = diffs.pop();
      secondItem = this._allItems[id + '-' + revisionToMerge];
      base = item.getLatestCommonAncestor(secondItem);
      baseItem = this._allItems[id + '-' + base];
      console.log("Conflict for " + id + ".");
      console.log(("Merging " + (item.getRevision()) + " ") + ("with " + revisionToMerge + " ") + ("using base " + base + " "));
      if (baseItem != null) {
        merged = item.mergeWith(secondItem, baseItem);
        console.log("Created " + (merged.getRevision()));
        return this.saveItem(merged);
      } else {
        return console.log("Unable to retrieve base revision object.");
      }
    };

    Manager.prototype._revisionsForID = function(id) {
      var filename, revNo, revision, thisID, _ref, _results;
      _results = [];
      for (filename in this._allItems) {
        _ref = filename.split('-'), thisID = _ref[0], revNo = _ref[1], revision = _ref[2];
        if (thisID !== id) {
          continue;
        }
        _results.push(revNo + '-' + revision);
      }
      return _results;
    };

    return Manager;

  })();

  Observer(Manager);

  (typeof exports !== "undefined" && exports !== null ? exports : this).Manager = Manager;

}).call(this);
// Generated by CoffeeScript 1.6.1
(function() {
  var SimpleButton, UserInterface;

  UserInterface = (function() {

    function UserInterface(_manager, _syncService) {
      var id, item, _ref,
        _this = this;
      this._manager = _manager;
      this._syncService = _syncService;
      this._currentlyEditingItems = {};
      this._currentlyDraggingItem = void 0;
      this._currentlyDraggingElement = void 0;
      this._dragStart = [0, 0];
      this._dragCurrent = [0, 0];
      this._dragLastMoveDiff = 0;
      this._showResolved = false;
      this._itemHeight = 48;
      this._currentCategory = '';
      this._initializeUI();
      this._itemChangeQueue = [];
      _ref = this._manager.getItems();
      for (id in _ref) {
        item = _ref[id];
        this._onItemChanged(item);
      }
      this._manager.observe(function(item) {
        return _this._onItemChanged(item);
      });
      this._syncService.observe(function(state, errorMessage) {
        var button;
        console.log(errorMessage);
        button = $('#syncState');
        return button.buttonMarkup({
          icon: (function() {
            switch (state) {
              case 'error':
                return 'delete';
              case 'waiting':
                return 'check';
              default:
                return 'throbber';
            }
          })()
        });
      });
      this._setCategory('');
    }

    UserInterface.prototype._initializeUI = function() {
      var newItem,
        _this = this;
      $(document).bind('touchmove mousemove', function(event) {
        return _this._moveDrag(event);
      });
      $(document).bind('touchend touchcancel mouseup', function(ev) {
        return _this._endDrag(ev);
      });
      $('#showResolved').click(function() {
        _this._showResolved = !_this._showResolved;
        $('#showResolved').button({
          theme: _this._showResolved ? 'b' : 'c'
        });
        return _this._showHideItems();
      });
      newItem = this._createElementMarkup('newItem').appendTo('#items');
      $('.item-text', newItem).text('New item');
      $('.item-center', newItem).click(function() {
        _this._showEditingButtonState('#newItem');
        $('.item-buttons-menu', '#newItem').show();
        $('.item-text', '#newItem').text('').addClass('editing');
        return _this._startTextEditing($('.item-text', newItem));
      });
      $('.abortEdit', newItem).click(function(ev) {
        ev.preventDefault();
        _this._showNonEditingState('#newItem');
        $('.item-buttons-menu', '#newItem').hide();
        _this._endTextEditing($('.item-text', newItem), 'New item');
        return $('.item-text').removeClass('editing');
      });
      $('.acceptEdit', newItem).click(function(ev) {
        var firstItem, pos, text;
        ev.preventDefault();
        text = $('.item-text', '#newItem').text();
        _this._showNonEditingState('#newItem');
        $('.item-buttons-menu', '#newItem').hide();
        _this._endTextEditing($('.item-text', '#newItem'), 'New item');
        $('.item-text').removeClass('editing');
        firstItem = _this._itemFromElement($('.item:eq(1)')[0]);
        pos = firstItem != null ? firstItem.getPosition() - 1 : 0;
        return _this._manager.saveItem(Item.createNew(text, _this._currentCategory, pos));
      });
      $('#openCategories').click(function() {
        var categories, category, _i, _len;
        $('#categoriesList').empty().append('<li data-icon="plus"><a href="#" id="newCategory">New Category</a></li>').append('<li><a href="#" id="defaultCategory">Default Category</a></li>');
        categories = _this._manager.getCategories();
        categories.sort();
        for (_i = 0, _len = categories.length; _i < _len; _i++) {
          category = categories[_i];
          if (category === '') {
            continue;
          }
          $('#categoriesList').append($('<li/>').append($('<a href="#"/>').text(category)));
        }
        $('#categoriesList').listview('refresh');
        $('#categoriesList li a').click(function(ev) {
          var cat;
          cat = '';
          if (ev.target.id === 'newCategory') {
            cat = window.prompt("Text");
            if (cat == null) {
              return;
            }
          } else if (ev.target.id === 'defaultCategory') {
            cat = '';
          } else {
            cat = ev.target.text;
          }
          _this._setCategory(cat);
          return window.setTimeout((function() {
            return $('#categoriesPanel').popup('close');
          }), 1);
        });
        return window.setTimeout((function() {
          return $('#categoriesPanel').popup('open');
        }), 1);
      });
      return $('#syncState').click(function() {
        return _this._syncService.fullSync();
      });
    };

    UserInterface.prototype._showHideItems = function() {
      var id, item, _ref, _results;
      _ref = this._manager.getItems();
      _results = [];
      for (id in _ref) {
        item = _ref[id];
        _results.push(this._showHideItem(item, $('#item_' + id)));
      }
      return _results;
    };

    UserInterface.prototype._isItemVisible = function(item) {
      var category;
      category = this._currentCategory;
      return (this._showResolved || !item.isResolved()) && item.getCategory() === category;
    };

    UserInterface.prototype._showHideItem = function(item, element) {
      if (this._isItemVisible(item)) {
        return element.addClass('visibleItem');
      } else {
        return element.removeClass('visibleItem');
      }
    };

    UserInterface.prototype._setCategory = function(category) {
      this._currentCategory = category;
      if (category === '') {
        category = 'Default Category';
      }
      $('#currentCategory').text(category);
      return this._showHideItems();
    };

    UserInterface.prototype._onItemChanged = function(item) {
      var element, id, isInserted;
      id = item.getID();
      if ((this._currentlyEditingItems[id] != null) || (this._currentlyDraggingItem != null)) {
        this._itemChangeQueue.push(id);
        return;
      }
      element = $('#item_' + id);
      isInserted = element.length > 0;
      if (!isInserted) {
        element = this._createElement(id);
      }
      this._showHideItem(item, element);
      SimpleButton.setHilight($('.resolved', element), item.isResolved());
      $('.item-text', element).text(item.getText());
      this._positionItem(element, item, isInserted);
      return item;
    };

    UserInterface.prototype._itemFromElement = function(element) {
      var id;
      id = element != null ? element.id : void 0;
      if ((id != null) && id.match(/^item_/)) {
        return this._manager.getItems()[id.slice(5)];
      }
    };

    UserInterface.prototype._binarySearch = function(list, comparator) {
      var begin, end, mid;
      begin = 0;
      end = list.length;
      while (begin < end) {
        mid = Math.floor((end + begin) / 2);
        if (!comparator(list[mid])) {
          begin = mid + 1;
        } else {
          end = mid;
        }
      }
      if (begin < list.length) {
        return list[begin];
      }
    };

    UserInterface.prototype._positionItem = function(element, thisItem, isInserted) {
      var items, upper,
        _this = this;
      items = $('.item').not('#newItem');
      if (isInserted) {
        items = items.not('#' + element.id);
      }
      upper = this._binarySearch(items, function(el) {
        var item;
        item = _this._itemFromElement(el);
        return (item != null) && Item.comparator(thisItem, item) < 0;
      });
      if (upper != null) {
        return element.insertBefore($(upper));
      } else if (!isInserted) {
        return element.appendTo('#items');
      }
    };

    UserInterface.prototype._createElementMarkup = function(elementId) {
      return $('<table class="item">' + '<tr>' + '<td class="item-buttons-left">' + SimpleButton.getMarkup('check', 'resolved') + '</td>' + '<td class="item-center">' + '<div class="item-text"></div>' + '</td>' + '<td class="item-buttons-menu">' + SimpleButton.getMarkup('check', 'acceptEdit') + SimpleButton.getMarkup('delete', 'abortEdit') + SimpleButton.getMarkup('arrow-u', 'move') + SimpleButton.getMarkup('edit', 'edit') + '</td>' + '<td class="item-buttons-right">' + SimpleButton.getMarkup('grid', 'menu') + '</td>' + '</tr>' + '</table>').attr('id', elementId);
    };

    UserInterface.prototype._createElement = function(id) {
      var el,
        _this = this;
      el = this._createElementMarkup('item_' + id);
      $('.resolved', el).click(function() {
        return _this._toggleItemResolution(id);
      });
      $('.menu', el).click(function() {
        return _this._toggleMenu(id);
      });
      $('.move', el).bind('touchstart mousedown', function(ev) {
        return _this._startDrag(id, ev);
      });
      $('.edit', el).click(function() {
        return _this._editItemClicked(id);
      });
      $('.abortEdit', el).click(function() {
        return _this._abortEditItemClicked(id);
      }).hide();
      $('.acceptEdit', el).click(function() {
        return _this._acceptEditItemClicked(id);
      }).hide();
      return el;
    };

    UserInterface.prototype._editItemClicked = function(id) {
      var item;
      if (this._currentlyEditingItems[id] != null) {
        return;
      }
      item = this._manager.getItems()[id];
      if (item != null) {
        this._currentlyEditingItems[id] = item;
        this._showEditingButtonState('#item_' + id);
        return this._startTextEditing($('.item-text', '#item_' + id));
      }
    };

    UserInterface.prototype._startTextEditing = function(textElement) {
      var range, sel;
      textElement.attr('contenteditable', 'true');
      range = document.createRange();
      range.selectNode(textElement[0].childNodes[0]);
      range.collapse(false);
      sel = window.getSelection();
      sel.removeAllRanges();
      sel.addRange(range);
      return textElement.focus();
    };

    UserInterface.prototype._endTextEditing = function(textElement, text) {
      if (text == null) {
        text = '';
      }
      return textElement.text(text).attr('contenteditable', 'false').blur();
    };

    UserInterface.prototype._abortEditItemClicked = function(id) {
      var item;
      item = this._currentlyEditingItems[id];
      delete this._currentlyEditingItems[id];
      if (item != null) {
        this._endTextEditing($('.item-text', '#item_' + id), item.getText());
        this._showNonEditingState('#item_' + id);
        this._hideMenu(id);
      }
      return this._replayIgnoredChanges();
    };

    UserInterface.prototype._acceptEditItemClicked = function(id) {
      var item, text;
      item = this._currentlyEditingItems[id];
      delete this._currentlyEditingItems[id];
      if (item != null) {
        text = $('.item-text', '#item_' + id).text();
        this._endTextEditing($('.item-text', '#item_' + id), text);
        this._showNonEditingState('#item_' + id);
        this._hideMenu(id);
        this._manager.saveItem(item.setText(text));
      }
      return this._replayIgnoredChanges();
    };

    UserInterface.prototype._showEditingButtonState = function(elementId) {
      $('.abortEdit, .acceptEdit', elementId).show();
      return $('.edit, .move', elementId).hide();
    };

    UserInterface.prototype._showNonEditingState = function(elementId) {
      $('.abortEdit, .acceptEdit', elementId).hide();
      return $('.edit, .move', elementId).show();
    };

    UserInterface.prototype._toggleMenu = function(id) {
      return $('.item-buttons-menu', '#item_' + id).toggle();
    };

    UserInterface.prototype._hideMenu = function(id) {
      return $('.item-buttons-menu', '#item_' + id).hide();
    };

    UserInterface.prototype._toggleItemResolution = function(id) {
      var item;
      item = this._manager.getItems()[id];
      if (item != null) {
        return this._manager.saveItem(item.setResolved(!item.isResolved()));
      }
    };

    UserInterface.prototype._startDrag = function(id, event) {
      var pos, _ref;
      if (this._currentlyDraggingItem != null) {
        return;
      }
      event.preventDefault();
      this._currentlyDraggingItem = this._manager.getItems()[id];
      this._currentlyDraggingElement = $('#item_' + id);
      pos = ((_ref = event.originalEvent) != null ? _ref.touches : void 0) != null ? event.originalEvent.touches[0] : event;
      this._dragCurrent = this._dragStart = [pos.pageX, pos.pageY];
      return this._currentlyDraggingElement.css({
        zIndex: '13',
        position: 'relative',
        top: '0px',
        left: '0px'
      });
    };

    UserInterface.prototype._moveDrag = function(event) {
      var el, move, pos, _ref;
      if (this._currentlyDraggingItem == null) {
        return;
      }
      event.preventDefault();
      pos = ((_ref = event.originalEvent) != null ? _ref.touches : void 0) != null ? event.originalEvent.touches[0] : event;
      this._dragCurrent = [pos.pageX, pos.pageY];
      el = this._currentlyDraggingElement;
      move = Math.round((this._dragCurrent[1] - this._dragStart[1]) / this._itemHeight);
      el[0].style.top = (this._dragCurrent[1] - this._dragStart[1]) + 'px';
      if (this._dragLastMoveDiff === move) {
        return;
      }
      if (this._dragLastMoveDiff > 0) {
        el.nextAll(".visibleItem:lt(" + this._dragLastMoveDiff + ")").css({
          top: '0px'
        });
      }
      if (this._dragLastMoveDiff < 0) {
        el.prevAll(".visibleItem:lt(" + (-this._dragLastMoveDiff) + ")").css({
          top: '0px'
        });
      }
      if (move > 0) {
        el.nextAll(".visibleItem:lt(" + move + ")").css({
          position: 'relative',
          top: (-this._itemHeight) + 'px'
        });
      }
      if (move < 0) {
        el.prevAll(".visibleItem:lt(" + (-move) + ")").css({
          position: 'relative',
          top: this._itemHeight + 'px'
        });
      }
      return this._dragLastMoveDiff = move;
    };

    UserInterface.prototype._repositionItem = function() {
      var el, move, sibling, siblingIndex, tentativeSibling;
      if (this._currentlyDraggingItem == null) {
        return;
      }
      el = this._currentlyDraggingElement;
      $('.item').css({
        position: '',
        top: ''
      });
      move = Math.round((this._dragCurrent[1] - this._dragStart[1]) / this._itemHeight);
      if (move === 0) {
        return;
      }
      siblingIndex = 0;
      sibling = el;
      while (Math.abs(siblingIndex) < Math.abs(move)) {
        tentativeSibling = move > 0 ? sibling.nextAll('.visibleItem:first') : sibling.prevAll('.visibleItem:first');
        if (tentativeSibling.length === 0) {
          break;
        }
        sibling = tentativeSibling;
        siblingIndex += move > 0 ? 1 : -1;
      }
      if (siblingIndex > 0) {
        el.insertAfter(sibling);
      }
      if (siblingIndex < 0) {
        el.insertBefore(sibling);
      }
      this._dragStart[1] += this._itemHeight * siblingIndex;
      el[0].style.left = '0px';
      return el[0].style.top = (this._dragCurrent[1] - this._dragStart[1]) + 'px';
    };

    UserInterface.prototype._endDrag = function(event) {
      var el, item, lower, pos, upper, _ref, _ref1,
        _this = this;
      item = this._currentlyDraggingItem;
      if (item == null) {
        return;
      }
      event.preventDefault();
      this._repositionItem();
      this._currentlyDraggingItem = void 0;
      el = this._currentlyDraggingElement;
      this._currentlyDraggingElement = void 0;
      lower = (_ref = this._itemFromElement(el.prev()[0])) != null ? _ref.getPosition() : void 0;
      upper = (_ref1 = this._itemFromElement(el.next()[0])) != null ? _ref1.getPosition() : void 0;
      pos = (lower != null) && (upper != null) ? (lower + upper) / 2.0 : lower != null ? lower + 1 : upper != null ? upper - 1 : 0;
      this._manager.saveItem(item.setPosition(pos)).then(function() {
        return _this._hideMenu(item.getID());
      });
      return this._replayIgnoredChanges();
    };

    UserInterface.prototype._replayIgnoredChanges = function() {
      var id, items, queue, _i, _len;
      queue = this._itemChangeQueue;
      this._itemChangeQueue = [];
      items = this._manager.getItems();
      for (_i = 0, _len = queue.length; _i < _len; _i++) {
        id = queue[_i];
        this._onItemChanged(items[id]);
      }
      return null;
    };

    return UserInterface;

  })();

  SimpleButton = {
    hilightClass: function(hilight) {
      if (hilight) {
        return 'ui-btn-up-b';
      } else {
        return 'ui-btn-up-c';
      }
    },
    getMarkup: function(icon, cssClass, hilight) {
      if (cssClass == null) {
        cssClass = '';
      }
      if (hilight == null) {
        hilight = false;
      }
      if (cssClass !== '') {
        cssClass += ' ';
      }
      cssClass += SimpleButton.hilightClass(hilight) + ' ';
      return ("<div class=\"" + cssClass + "ui-btn ui-shadow ui-mini ") + "ui-btn-corner-all ui-btn-inline " + "ui-btn-icon-notext\" aria-disabled=\"false\">" + "<span class=\"ui-btn-inner\">" + ("<span class=\"ui-icon ui-icon-" + icon + " ui-icon-shadow\">") + "&nbsp;</span></span></div>";
    },
    setHilight: function(element, hilight) {
      if (hilight == null) {
        hilight = false;
      }
      return $(element).removeClass(this.hilightClass(!hilight)).addClass(this.hilightClass(hilight));
    }
  };

  (typeof exports !== "undefined" && exports !== null ? exports : this).UserInterface = UserInterface;

}).call(this);
// Generated by CoffeeScript 1.6.1
(function() {
  var Application;

  Application = (function() {

    function Application() {
      this._database = new Database(LocalStorageBackend, {
        context: 'synclist'
      });
      this._settings = new Settings(this._database);
      this._syncService = new SyncService(this._settings, this._database);
      this._manager = new Manager(this._database, this._syncService);
      this._userInterface = new UserInterface(this._manager, this._syncService);
    }

    return Application;

  })();

  (typeof exports !== "undefined" && exports !== null ? exports : this).Application = Application;

  jQuery(function() {
    return window.ApplicationInstance = new Application();
  });

}).call(this);
